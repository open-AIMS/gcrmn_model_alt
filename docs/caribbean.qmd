---
title: "Comparing models - Caribbean"
author: "Murray Logan"
date: today
date-format: "DD/MM/YYYY"
format:
  html:
    ## Format
    theme: [default, resources/style.scss]
    css: resources/style.css
    html-math-method: mathjax
    ## Table of contents
    toc: true
    toc-float: true
    ## Numbering
    number-sections: true
    number-depth: 3
    ## Layout
    page-layout: full
    fig-caption-location: "bottom"
    fig-align: "center"
    fig-width: 4
    fig-height: 4
    out-width: 500px
    fig-dpi: 72
    tbl-cap-location: top
    ## Code
    code-fold: false
    code-tools: true
    code-summary: "Show the code"
    code-line-numbers: true
    code-block-border-left: "#ccc"
    code-copy: true
    highlight-style: atom-one
    ## Execution
    execute:
      echo: true
      #cache: true
    ## Rendering
    embed-resources: true
crossref:
  fig-title: '**Figure**'
  fig-labels: arabic
  tbl-title: '**Table**'
  tbl-labels: arabic
engine: knitr
## execute:
##   cache: true
jupyter: python3
output_dir: "docs"
documentclass: article
fontsize: 12pt
mainfont: Arial
mathfont: LiberationMono
monofont: DejaVu Sans Mono
classoption: a4paper
bibliography: resources/references.bib
---

```{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(
    cache.lazy = FALSE,
    tidy = "styler"
)
## allow indented chunks
assignInNamespace(".sep.label",
  "^\\ *(#|--)+\\s*(@knitr|----+)(.*?)-*\\s*$",
    ns = "knitr"
)
knitr::read_chunk("../R/process_spatial.R")
knitr::read_chunk("../R/process_benthic_data.R")
knitr::read_chunk("../R/fit_models.R")
knitr::read_chunk("../R/aggregate_models.R")
knitr::read_chunk("../R/helper_functions.R")
## knitr::read_chunk("../python/incomplete_spatial.py")
## remove the indentation from all python chunks that start
## with indentation
codes <- knitr::knit_code$get()
process_chunks <- function(codes) {
  nms <- names(codes)
  wch <- which(startsWith(names(codes), "python"))
  codes1 <- lapply(1:length(codes), function(i) {
    if (i %in% wch) {
      x <- gsub("^ {4}", "", codes[[i]])
    } else {
      x <- codes[[i]]
    }
    x
  })
  names(codes1) <- nms
  codes1
}
knitr::knit_code$set(
  process_chunks(codes)
)

options(tinytex.engine =  'xelatex')
```

```{css, echo=FALSE}
figcaption {
  text-align: left !important;
}
```

```{r}
#| label: packages
#| echo: false
#| eval: true
#| cache: false
#| warning: false
#| message: false
#| output: false
library(tidyverse)
```


## Guide

In each of the following sections:

- the dark blue line represents the mean of the cover estimates
  (bootstrapped xgboost model)
- the blue band represents the 95% interval of cover estimates
  (bootstrapped xgboost model)
- the white line represents the posterior median of cover estimates
  (Bayesian Heirarchical model)
- the darkest orange band represents the 80% credibility interval of
  cover estimates (Bayesian Heirarchical model)
- the orange band represents the 95% credibility interval of the
  cover estimates (Bayesian Heirarchical model)
- the light orange band represents the 95% credibility interval of
  cover estimates for years in which there were no observed data in
  the presented spatial scale (e.g. Ecoregion, Subregion or Region)
  (Bayesian Heirarchical model).
- in the case of Subregions and Regions, the light orange band only
  appears for spans of years for which there were no observations
  across all the consistuent spatial units.

```{r}
#| label: read aggregate ecoregion plots
#| eval: true
#| echo: false
#| warning: false
#| message: false
#| cache: false
benthic_posteriors_ecoregions <- targets::tar_read("aggregate_ecoregion_plots_", store = "../R/_targets")
```

```{r}
#| label: read aggregate subregion plots
#| eval: true
#| echo: false
#| warning: false
#| message: false
#| cache: false
benthic_posteriors_subregions <- targets::tar_read("aggregate_subregion_plots_", store = "../R/_targets")
wts <- targets::tar_read("process_spatial_weights_", store = "../R/_targets") |>
  mutate(GCRMN_region = str_replace(GCRMN_region, "East Asia", "EAS"),
    GCRMN_subregion = str_replace(GCRMN_subregion, "East Asia", "EAS")
  )
```

```{r}
#| label: read aggregate region plots
#| eval: true
#| echo: false
#| warning: false
#| message: false
#| cache: false
benthic_posteriors_regions <- targets::tar_read("aggregate_region_plots_", store = "../R/_targets")
```

```{r}
#| label: aggregate ecoregion plots
#| eval: true
#| echo: false
#| output: asis
#| warning: false
#| message: false
#| cache: false
## cat("::: {.panel-tabset}\n")
reg <- "Caribbean"
dat_reg <- benthic_posteriors_ecoregions |>
 dplyr::filter(region == reg)
##cat("::: {.panel-tabset}\n")
cats <- sort(unique(dat_reg$category))
## Make the order Hard coral, Macroalgae and then the rest (but drop Other fauna)
cats <- setdiff(cats, "Other fauna")
cats <- c(intersect(c("Hard coral", "Macroalgae"), cats),
          setdiff(cats, c("Hard coral", "Macroalgae")))

for (catg in cats) {
  cat(paste0("## ", catg, "\n"))
  ## Ecoregion level =====================================================================
  cat(paste0("### Ecoregion level\n"))
  dat_cat <- dat_reg |>
    dplyr::filter(category == catg)
  cat("::: {.panel-tabset}\n")
  for (subreg in sort(unique(dat_cat$subregion))) {
    cat(paste0("###### ", subreg, "\n"))
    dat_subreg <- dat_cat |>
      dplyr::filter(subregion == subreg)
    cat("::: {.panel-tabset}\n")
    for (eco in sort(unique(dat_subreg$ecoregion))) {
      cat(paste0("###### ", eco, "\n"))
      dat_eco <- dat_subreg|>
        dplyr::filter(ecoregion == eco)
      fig <- dat_eco$plot[[1]]
      fig2 <- str_replace(fig, "pdp", "pdpraw")
      fig3 <- str_replace(fig, "pdp", "pdprawxgboost")
      cat(paste0(#"![](", fig2, "){width=300px}",
                 "![](", fig, "){width=300px}",
                 "![](", fig3, "){width=300px}\n\n"
                 ))
    }
    cat(":::\n")
  }
  cat(":::\n")

  ## Subregion level =====================================================================
  cat(paste0("### Subregion level\n"))
  cat("::: {.panel-tabset}\n")
  for (subreg in sort(unique(dat_cat$subregion))) {
    cat(paste0("###### ", subreg, "\n"))
    dat_subreg <- benthic_posteriors_subregions |>
      dplyr::filter(category == catg, subregion == subreg)
    fig <- dat_subreg$plot[[1]]
    fig2 <- str_replace(fig, "pdp", "pdpraw")
    fig3 <- str_replace(fig, "pdp", "pdprawxgboost")
    cat(paste0(#"![](", fig2, "){width=300px}",
      #"![](", fig, "){width=300px}",
      "![](", fig3, "){width=500px}\n\n"
    ))
    cat('::: {.callout-note collapse="true"}\n#### View weights\n')
    wts |>
      mutate(GCRMN_subregion = str_replace(GCRMN_subregion, "\\.", " ")) |>
      filter(GCRMN_region == reg,
             GCRMN_subregion == subreg) |>
      dplyr::select(Region = GCRMN_region,
                    Subregion = GCRMN_subregion,
                    Ecoregion = ECOREGION,
                    Area = area,
                    Weight = wt) |>
      knitr::kable(caption = "Ecoregion (MEOW) reef area and weights applied in the aggregation up to Subregion") |>
      print()
    cat(":::\n")
  }
  cat(":::\n")

  ## Region level =====================================================================
  cat(paste0("### Region level\n"))
  data_reg <- benthic_posteriors_regions |>
    dplyr::filter(category == catg, region == reg)
  fig <- data_reg$plot[[1]]
  fig2 <- str_replace(fig, "pdp", "pdprawxgboost")
  cat(paste0(#"![](", fig, "){width=300px}",
             "![](", fig2, "){width=500px}\n\n"))
  cat('::: {.callout-note collapse="true"}\n#### View weights\n')
  wts |>
    mutate(GCRMN_subregion = str_replace(GCRMN_subregion, "\\.", " ")) |>
    filter(GCRMN_region == reg) |>
    dplyr::select(Region = GCRMN_region,
                  Subregion = GCRMN_subregion,
                  Area = subregion_area) |>
    group_by(Region, Subregion) |>
    summarise(Area = unique(Area), .groups = "drop") |>
    mutate(wt = Area / sum(Area)) |>
    knitr::kable(caption = "Subregion reef area and weights applied in the aggregation up to Region") |>
    print()
    cat(":::\n")
}
```
  
